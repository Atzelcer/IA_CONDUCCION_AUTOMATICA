#!/bin/bash
# ================================================================
# INSTALADOR AUTOMATICO - PROYECTOIAUE DQN (Linux/Mac)
# Sistema de Conducci√≥n Aut√≥noma con Deep Q-Learning
# ================================================================

echo "================================================================"
echo "PROYECTOIAUE - INSTALADOR AUTOMATICO"
echo "Sistema de Conducci√≥n Aut√≥noma con DQN Learning"
echo "================================================================"
echo

# Verificar Python
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 no est√° instalado"
    echo "Por favor instala Python 3.10+ usando tu gestor de paquetes"
    exit 1
fi

echo "‚úÖ Python detectado"
python3 --version

# Crear entorno virtual
echo
echo "üì¶ Creando entorno virtual..."
if [ -d "venv_dqn" ]; then
    echo "‚ö†Ô∏è El entorno virtual ya existe. ¬øDesea recrearlo? (s/n)"
    read -r recreate
    if [[ $recreate == "s" || $recreate == "S" ]]; then
        rm -rf venv_dqn
        python3 -m venv venv_dqn
    fi
else
    python3 -m venv venv_dqn
fi

# Activar entorno virtual
echo
echo "üîß Activando entorno virtual..."
source venv_dqn/bin/activate

# Actualizar pip
echo
echo "üìà Actualizando pip..."
python -m pip install --upgrade pip

# Instalar dependencias
echo
echo "üì¶ Instalando dependencias..."
pip install -r requirements.txt

if [ $? -ne 0 ]; then
    echo
    echo "‚ùå Error instalando dependencias b√°sicas"
    echo "Instalando dependencias una por una..."
    
    echo "Instalando NumPy..."
    pip install "numpy>=1.21.0"
    
    echo "Instalando Matplotlib..."
    pip install "matplotlib>=3.5.0"
    
    echo "Instalando PyTorch..."
    pip install "torch>=1.12.0" "torchvision>=0.13.0" "torchaudio>=0.12.0"
    
    echo "Instalando ONNX..."
    pip install "onnx>=1.12.0" "onnxruntime>=1.12.0"
    
    echo "Instalando utilidades..."
    pip install "seaborn>=0.11.0" "pandas>=1.4.0" "tqdm>=4.64.0"
fi

# Verificar instalaci√≥n
echo
echo "üîç Verificando instalaci√≥n..."
python -c "import torch; print('‚úÖ PyTorch:', torch.__version__)"
python -c "import numpy; print('‚úÖ NumPy:', numpy.__version__)"
python -c "import matplotlib; print('‚úÖ Matplotlib:', matplotlib.__version__)"
python -c "import onnxruntime; print('‚úÖ ONNX Runtime:', onnxruntime.__version__)"

# Crear estructura de directorios
echo
echo "üìÅ Creando estructura de directorios..."
mkdir -p logs models results configs

# Generar configuraci√≥n por defecto
echo
echo "‚öôÔ∏è Generando configuraci√≥n por defecto..."
python -c "
from dqn_utils import ConfigManager
config = ConfigManager.get_default_config()
ConfigManager.save_config(config, 'configs/dqn_default.json')
print('‚úÖ Configuraci√≥n creada: configs/dqn_default.json')
"

# Verificar Q-Table existente
echo
echo "üîç Verificando archivos de modelo..."
if [ -f "q_table_agenteRL.npy" ]; then
    echo "‚úÖ Q-Table encontrada: q_table_agenteRL.npy"
else
    echo "‚ö†Ô∏è Q-Table no encontrada"
    echo "Ejecutando entrenamiento b√°sico..."
    python entrenar_agente_q_table_complejo.py
fi

# Verificar modelo ONNX
if [ -f "conducionModel.onnx" ]; then
    echo "‚úÖ Modelo ONNX encontrado: conducionModel.onnx"
else
    echo "‚ö†Ô∏è Modelo ONNX no encontrado"
    echo "Se generar√° autom√°ticamente durante el entrenamiento DQN"
fi

echo
echo "================================================================"
echo "‚úÖ INSTALACI√ìN COMPLETADA EXITOSAMENTE"
echo "================================================================"
echo
echo "üöÄ COMANDOS DISPONIBLES:"
echo
echo "1. MODELO 1 - Q-Learning Cl√°sico:"
echo "   python agente_q_table_tcp.py"
echo
echo "2. MODELO 2 - DQN Avanzado:"
echo "   python dqn_agente_avanzado.py          # Entrenamiento"
echo "   python dqn_server_tcp.py               # Servidor en tiempo real"
echo
echo "3. Evaluaci√≥n y an√°lisis:"
echo "   python dqn_evaluator.py"
echo
echo "4. Utilidades:"
echo "   python dqn_utils.py                    # Herramientas de debug"
echo
echo "================================================================"
echo "üìã PR√ìXIMOS PASOS:"
echo
echo "1. Configurar Unreal Engine 4.27"
echo "2. Abrir TF_APR_ConduccionAut.uproject"
echo "3. Compilar el proyecto en Unreal Engine"
echo "4. Ejecutar uno de los servidores Python (comando arriba)"
echo "5. Iniciar la simulaci√≥n en Unreal Engine"
echo
echo "‚ÑπÔ∏è Para m√°s informaci√≥n, consultar README.md"
echo "================================================================"
echo

# Hacer ejecutables los scripts de Python
chmod +x *.py

echo "üîß Permisos de ejecuci√≥n configurados"
echo "Para activar el entorno virtual en futuras sesiones:"
echo "source venv_dqn/bin/activate"
